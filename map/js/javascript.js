const createGroupButton = document.querySelector(".filter__button");
const filterList = document.querySelector(".filter__list");
const powerLineIcon = createPowerLineIcon();
const renderedLines = new Map();
const activeFilters = new Map();

const colorNames = {
    blue: "–°–∏–Ω–∏–π",
    white: "–ë–µ–ª—ã–π",
    purple: "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π",
    orange: "–û—Ä–∞–Ω–∂–µ–≤—ã–π",
    red: "–ö—Ä–∞—Å–Ω—ã–π",
    green: "–ó–µ–ª—ë–Ω—ã–π",
    yellow: "–ñ—ë–ª—Ç—ã–π",
    brown: "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π"
};

const statusNames = {
    excellent: "–û—Ç–ª–∏—á–Ω–æ–µ",
    normal: "–í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã",
    needs_attention: "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
}

let lines, map;

function getGroupHTML(color) {
    const russianColor = colorNames[color] || color;

    return `
    <div class="group">
      <div class="group__headline">
          <h3 class="group__title">${russianColor}</h3>
          <button class="group__apply-btn">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
      </div>
      <div class="group__filter dropdown-container">
          <fieldset class="filter-group__section">
              <legend>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ</legend>
              <label><input type="checkbox" name="voltage" value="100"> 100 –í</label>
              <label><input type="checkbox" name="voltage" value="200" checked> 200 –í</label>
              <label><input type="checkbox" name="voltage" value="300"> 300 –í</label>
          </fieldset>

          <fieldset class="filter-group__section">
              <legend>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</legend>
              <label><input type="radio" name="status-${color}" value="excellent"> –û—Ç–ª–∏—á–Ω–æ–µ</label>
              <label><input type="radio" name="status-${color}" value="normal" checked> –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã</label>
              <label><input type="radio" name="status-${color}" value="needs_attention"> –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ</label>
          </fieldset>

          <fieldset class="filter-group__section">
              <legend>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</legend>
              <div class="date-input">
                  <input type="date" placeholder="–î–∞—Ç–∞ –æ—Ç">
                  <input type="date" placeholder="–î–∞—Ç–∞ –¥–æ">
              </div>
          </fieldset>

          <div class="buttons">
              <button>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞</button>
              <button>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥</button>
              <button>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞</button>
          </div>
      </div>
  </div>
  `
}

createGroupButton.addEventListener("click", function () {
    const selectedColor = colorSelector.value;
    const selectedOption = colorSelector.querySelector(`option[value="${selectedColor}"]`);
    const selector = document.getElementById("colorSelector");

    if (selectedOption == null) {
        selector.style.visibility = "hidden";
        alert("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.");
        return;
    }

    selectedOption.remove();

    if (selector.options.length === 0) {
        selector.style.visibility = "hidden";
    }

    // üëá –î–æ–±–∞–≤–ª—è–µ–º CSS-—Å—Ç–∏–ª—å —Å –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç–æ–º
    const pseudoClass = `pseudo-${selectedColor}`;
    const styleId = `style-${selectedColor}`;

    if (!document.getElementById(styleId)) {
        const styleTag = document.createElement("style");
        styleTag.id = styleId;
        styleTag.innerHTML = `
        .${pseudoClass}::before {
          content: '';
          display: inline-block;
          width: 13px;
          height: 13px;
          margin-right: 6px;
          background-color: ${selectedColor};
          border-radius: 2px;
          border: solid black 1px;
        }
      `;
        document.head.appendChild(styleTag);
    }

    // üëá –ü–µ—Ä–µ–¥–∞—ë–º —Ü–≤–µ—Ç –≤ —Ä–∞–∑–º–µ—Ç–∫—É –≥—Ä—É–ø–ø—ã
    const groupHTML = getGroupHTML(selectedColor, pseudoClass);
    filterList.insertAdjacentHTML("beforeend", groupHTML);

    const lastGroup = filterList.querySelector(".group:last-child");
    const applyBtn = lastGroup.querySelector(".group__apply-btn");

    applyBtn.addEventListener("click", function (event) {
        if (event.target.classList.contains("group__apply-btn")) {
            const group = event.target.closest(".group");
    
            const voltageInputs = group.querySelectorAll('input[name="voltage"]:checked');
            const selectedVoltages = Array.from(voltageInputs).map(input => input.value);
    
            const statusInput = group.querySelector(`input[name="status-${selectedColor}"]:checked`);
            const selectedStatus = statusInput ? statusInput.value : null;
    
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            activeFilters.set(selectedColor, {
                voltages: selectedVoltages,
                statuses: [selectedStatus]
            });
    
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å—ë –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º
            reDrawAllFiltered();

            const legend = document.querySelector(".legend");

            const existingLegendItem = legend.querySelector(`.legend-item.pseudo-${selectedColor}`);
            const russianSelectedColor = colorNames[selectedColor] || selectedColor;
            const russianSelectedStatus = statusNames[selectedStatus] || selectedStatus;

            const newLegendItemHtml = `
          <span class="legend__color">${russianSelectedColor}</span><br>
          <span><b>–í–æ–ª—å—Ç–∞–∂:</b> ${selectedVoltages}</span>,<br> 
          <span><b>–°—Ç–∞—Ç—É—Å:</b> ${russianSelectedStatus}</span>
        `;

            if (existingLegendItem) {
                existingLegendItem.innerHTML = newLegendItemHtml;
            } else {
                const legendItem = document.createElement("div");
                legendItem.classList.add("legend-item", `pseudo-${selectedColor}`);
                legendItem.innerHTML = newLegendItemHtml;
                legend.appendChild(legendItem);
            }
        }
    });

    const dropdowns = filterList.querySelectorAll(".group__headline");

    dropdowns.forEach(dropdown => {
        if (!dropdown.dataset.listenerAttached) {
            dropdown.addEventListener("click", clickOnGroup);
            dropdown.dataset.listenerAttached = "true";
        }
    });
});

function clickOnGroup(event) {
    const headline = event.currentTarget;
    const content = headline.nextElementSibling;

    headline.classList.toggle("active");
    content.classList.toggle("open");
}


function renderPowerLine(line, icon, map) {
    const { coordinates, color, id, voltage, status } = line;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª–æ–∏ —ç—Ç–æ–π –ª–∏–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (renderedLines.has(id)) {
        renderedLines.get(id).forEach(layer => map.removeLayer(layer));
    }

    const layers = [];

    const polyline = L.polyline(coordinates, {
        color: color || 'black',
        weight: 4
    }).addTo(map);
    layers.push(polyline);

    coordinates.forEach(coords => {
        const marker = L.marker(coords, { icon })
            .addTo(map)
            .bindPopup(`<b>
                –õ–∏–Ω–∏—è #${id}</b><br>
                –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: ${voltage}<br>
                –°—Ç–∞—Ç—É—Å: ${statusNames[status]}<br>
                <button class="request-btn" data-id="${id}">–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
                `);
        layers.push(marker);
    });

    renderedLines.set(id, layers);
}

function createPowerLineIcon() {
    return L.icon({
        iconUrl: 'img/powerLine.png',
        iconSize: [40, 35], // size of the icon
        iconAnchor: [20, 35], // point of the icon which will correspond to marker's location
        shadowAnchor: [4, 62],  // the same for the shadow
        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
    });
}

function reDrawAllFiltered() {
    lines.forEach(line => {
        let matchedColor = null;

        for (let [color, filter] of activeFilters.entries()) {
            const matchesVoltage = filter.voltages.includes(String(line.voltage));
            const matchesStatus = filter.statuses.includes(line.status);

            if (matchesVoltage && matchesStatus) {
                matchedColor = color;
                break; // –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "continue", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
            }
        }

        line.color = matchedColor || 'black';
        renderPowerLine(line, powerLineIcon, map);
    });
}

// –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.addEventListener("DOMContentLoaded", function () {
    map = L.map('map').setView([51.505, -0.09], 13);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–∞–π–ª—ã –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ, –∑–∞–º–µ–Ω–∏—Ç–µ URL)
    L.tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    lines = [
        {
            "id": 1,
            "voltage": 100,
            "coordinates": [
                [53.9006, 27.5593],
                [53.9053, 27.5538],
                [53.9091, 27.5580],
                [53.9151, 27.5524],
                [53.9174, 27.5529],
                [53.9251, 27.5450],
            ],
            "status": "excellent"
        },
        {
            "id": 2,
            "voltage": 100,
            "coordinates": [
                [53.8806, 27.5593],
                [53.8853, 27.5538],
                [53.8891, 27.5580],
                [53.8951, 27.5524],
                [53.8974, 27.5529],
                [53.9051, 27.5450],
            ],
            "status": "normal"
        },
        {
            "id": 3,
            "voltage": 300,
            "coordinates": [
                [53.9100, 27.5600],
                [53.9120, 27.5650],
                [53.9160, 27.5700],
                [53.9200, 27.5750]
            ],
            "status": "needs_attention"
        },
        {
            "id": 4,
            "voltage": 200,
            "coordinates": [
                [53.9300, 27.5800],
                [53.9350, 27.5850],
                [53.9400, 27.5900],
                [53.9450, 27.5950],
                [53.9500, 27.6000]
            ],
            "status": "normal"
        },
        {
            "id": 5,
            "voltage": 300,
            "coordinates": [
                [53.8600, 27.5100],
                [53.8650, 27.5150],
                [53.8700, 27.5200],
                [53.8750, 27.5250],
                [53.8800, 27.5300]
            ],
            "status": "excellent"
        }
    ]

    lines.forEach(line => renderPowerLine(line, powerLineIcon, map));

    // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –æ—Ö–≤–∞—Ç –≤—Å–µ—Ö —Ç–æ—á–µ–∫
    const allCoords = lines.flatMap(line => line.coordinates);
    if (allCoords.length > 0) {
        map.fitBounds(allCoords);
    }
});